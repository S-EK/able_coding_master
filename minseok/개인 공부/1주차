1. 코딩 테스트 준비하기

  -1 시간 복잡도 정의하기
    시간 복잡도 유형
      빅-오메가: 최선일 때의 연산 횟수를 나타낸 표기법
      빅-세타: 보통일 때의 연산 횟수를 나타낸 표기법
      빅-오: 최악일 때의 연산 횟수를 나타낸 표기법

  -2 디버깅의 중요성
      디버깅하는 법
        1. 코드에서 디버깅하고자 하는 줄에 중단점을 설정한다. 이때 중단점은 여러 개 설정할 수 있다.
        2. IDE의 디버깅 기능을 실행하면 코드를 1줄씩 실행하거나 다음 중단점까지 실행할 수 있으며, 이 과정에서 추적할 변숫값도 지정할 수 있다. 이 방법으로 변숫값이 자신이 의도한 대로 바뀌는지 파악한다.
        3. 변숫값 이외에도 원하는 수식을 입력해 논리 오류를 파악할 수 있다.

2. 기초 편

  -1 배열과 리스트
    배열과 리스트의 핵심이론
      배열은 메모리의 연속 공간에 값이 채워져 있는 형태의 자료 구조,
      배열의 값은 인덱스를 통해 참조할 수 있으며, 선언한 자료형의 값만 저장할 수 있습니다.
    배열의 특징
      1. 인덱스를 사용하여 값에 바로 접근할 수 있다.
      2. 새로운 값을 삽입하거나 특정 인덱스레 있는 값을 삭제하기 어렵다. 값을 삽입하거나 삭제하려면 해당 인덱스 주변에 있는 값을 이동시키는 과정이 필요하다.
      3. 배열의 크기는 선언할 때 지정할 수 있으며, 한 번 선안하면 크기를 늘리거나 줄일 수 없다.
      4. 구조가 간단하므로 코딩 테스트에서 많이 사용한다.
    리스트
      리스트는 값과 포인터를 ㅜㄲ는 노드라는 것을 포인터로 연결한 자료구조입니다.
    리스트의 특징
      1. 인덱스가 없으므로 값에 접근하려면 Head 포인터부터 순서대로 접근해야한다. 
          다시말해 값에 접근하는 속도가 느리다.
      2. 포인터로 연결되어 있으므로 데이터를 삽입하거나 삭제하는 연산 속도가 빠르다.
      3. 선언할 때 크기를 별도로 지정하지 않아도 된다. 다시 말해 리스트의 크기는 정해져 있지 않으며, 크기가 변하기 쉬운 데이터를 다룰 때 적절하다.
      4. 포인터를 저장할 공간이 필요하므로 배열보다 구조가 복잡하다.

-연습문제-
숫자의 합 구하기   (난이도: 브론즈 4)
평균 구하기        (난이도: 브론즈 1)

  -2 구간 합
    구간 합의 핵심 이론
      구간 함 알고리즘을 활용하려면 먼저 합 배열을 구해야 합니다. 리스트 A가 있을 때 합 배열 S는 다음과 같이 정의합니다.
    합 배열 S를 만드는 공식
      S[i] = S[i-1] + A[i]
    구간 합을 구하는 공식
      S[j] - S[i-1]

    A[2] ~ A[5] 구간 합을 합 배열로 구하는 과정
      S[5] = A[0] + A[1] + A[2] + A[3] + A[4] + A[5]
      S[1] = A[0] + A[1]
      S[5] - S[1] = A[2] + A[3] + A[4] + A[5]

-연습문제-
구간 합 구하기 1   (난이도: 실버 3)
구간 합 구하기 2   (난이도: 실버 1)
나머지 합 구하기   (난이도: 골드 3)
